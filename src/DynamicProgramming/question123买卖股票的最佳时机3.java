package DynamicProgramming;

//给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。
//设计一个算法来计算你所能获取的最大利润。你最多可以完成两笔交易。
//注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
//
//示例1:
//
//输入：prices = [3,3,5,0,0,3,1,4]
//输出：6
//解释：在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。
//    随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。
//示例 2：
//
//输入：prices = [1,2,3,4,5]
//输出：4
//解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。  
//    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。  
//    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
//示例 3：
//
//输入：prices = [7,6,4,3,1] 
//输出：0 
//解释：在这个情况下, 没有交易完成, 所以最大利润为 0。
//示例 4：
//
//输入：prices = [1]
//输出：0
//
//提示：
//
//1 <=prices.length <= 105
//0 <=prices[i] <=105

public class question123买卖股票的最佳时机3 {
    public static int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][5];     // 创建二维数组存储状态,dp数组表示收益

        //定义5种状态 0：没有操作，1：第一次买入，2：第一次卖出，3：第二次买入，4：第二次卖出
        dp[0][1]=-prices[0];
        dp[0][3]=-prices[0];
        //初始化第二次买入的状态是确保，最后结果是最多两次买卖的最大利润

        for (int i = 1; i < prices.length; i++) {
            dp[i][0]=dp[i-1][0];    //第二天不进行操作
            dp[i][1]=Math.max(dp[i-1][1],dp[i-1][0]-prices[i]); //第i天第一次买入股票
            dp[i][2]=Math.max(dp[i-1][2],dp[i-1][1]+prices[i]); //第i天第一次卖出股票
            dp[i][3]=Math.max(dp[i-1][3],dp[i-1][2]-prices[i]); //第i天第二次买入股票
            dp[i][4]=Math.max(dp[i-1][4],dp[i-1][3]+prices[i]); //第i天第二次买入股票
        }
        return dp[prices.length-1][4];
    }

    public static void main(String[] args) {
        int[] prices = {3,3,5,0,0,3,1,4};
        maxProfit(prices);
    }
}
